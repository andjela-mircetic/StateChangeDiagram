package StateChangeLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class createNewTransitionForState_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public createNewTransitionForState_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:0d848e4c-4d44-424c-8863-a532d1712477(StateChangeLanguage.intentions)", "2204792292120164215"));
  }

  @Override
  public String getPresentation() {
    return "createNewTransitionForState";
  }

  @Override
  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }

    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Crate new event for this state";
    }

    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      SNode statenode = (SNode) SNodeOperations.getParent(node);
      int index = ListSequence.fromList(SLinkOperations.getChildren(statenode, LINKS.transitionsForState$$Wwi)).indexOf(node);

      SNode newNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf269776b13f84556L, 0xb9ea9dcaab37b019L, 0x67cbbaac519b5052L, "StateChangeLanguage.structure.Transition"));
      ListSequence.fromList(SLinkOperations.getChildren(statenode, LINKS.transitionsForState$$Wwi)).addElement(newNode);
    }

    @Override
    public boolean isApplicable(final SNode node, final EditorContext editorContext) {
      return true;
    }



    @Override
    public IntentionDescriptor getDescriptor() {
      return createNewTransitionForState_Intention.this;
    }

  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink transitionsForState$$Wwi = MetaAdapterFactory.getContainmentLink(0xf269776b13f84556L, 0xb9ea9dcaab37b019L, 0x1e98fee87f52fc4bL, 0x1e98fee87f52fc4fL, "transitionsForState");
  }
}
